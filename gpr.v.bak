//2023.10.1
`include "define.v"
module gpr(
						input clk,
						input reset,
						input reg_write,
						input [4:0]rs1,
						input [4:0]rs2,
						input [4:0]rd,
						input [31:0]wr_reg_data,
						
						output [31:0]read_data1,
						output [31:0]read_data2
    			);
	
	
	reg [31:0] regs [31:0];
	
	
///write
`ifdef INITIAL//在仿真时赋值
	always@(posedge clk )
		begin
			if(reg_write & (rd!=0))
			regs[rd]<=wr_reg_data;	
		end
`else		//在仿真前初始化
	always@(posedge clk )
		begin
			if(!reset)
				begin
					regs[0]<=`zero_word;
					regs[1]<=`zero_word;
					regs[2]<=`zero_word;
					regs[3]<=`zero_word;
					regs[4]<=`zero_word;
					regs[5]<=`zero_word;
					regs[6]<=`zero_word;
					regs[7]<=`zero_word;
					regs[8]<=`zero_word;
					regs[9]<=`zero_word;
					regs[10]<=`zero_word;
					regs[11]<=`zero_word;
					regs[12]<=`zero_word;
					regs[13]<=`zero_word;
					regs[14]<=`zero_word;
					regs[15]<=`zero_word;
					regs[16]<=`zero_word;
					regs[17]<=`zero_word;
					regs[18]<=`zero_word;
					regs[19]<=`zero_word;
					regs[20]<=`zero_word;
					regs[21]<=`zero_word;
					regs[22]<=`zero_word;
					regs[23]<=`zero_word;
					regs[24]<=`zero_word;
					regs[25]<=`zero_word;
					regs[26]<=`zero_word;
					regs[27]<=`zero_word;
					regs[28]<=`zero_word;
					regs[29]<=`zero_word;
					regs[30]<=`zero_word;
					regs[31]<=`zero_word;
				end
			else if(reg_write & (rd!=0))
					regs[rd]<=wr_reg_data;	
		end
`endif	
//read

	assign read_data1=(rs1==5'd0)?`zero_word: regs[rs1];
	assign read_data2=(rs2==5'd0)?`zero_word: regs[rs2];
	

endmodule
